// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Search {
  id            Int           @id @default(autoincrement())
  name          String
  count         Int
  user_searches User_Search[]
}

model User_Search {
  id       Int    @id @default(autoincrement())
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId   Int    @map("user_id")
  search   Search @relation(fields: [searchId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  searchId Int    @map("search_id")
}

enum Role {
  USER
  ADMIN
}

enum RefundType {
  POINT
  BANK
}

model User {
  id                Int                @id @default(autoincrement())
  role              Role               @default(USER)
  name              String
  email             String             @unique
  password          String
  phone             String?
  refund            RefundType?
  point             Int                @default(0)
  shippingAddresses Shipping_Address[]
  products          Product[]
  favorites         Favorite[]
  cart              Cart?
  orders            Order[]
  user_searches     User_Search[]
}

model Shipping_Address {
  id            Int     @id @default(autoincrement())
  firstName     String  @map("first_name")
  lastName      String  @map("last_name")
  phone         String
  email         String?
  address       String
  postalCode    String  @map("postal_code")
  province      String
  district      String
  subDistrict   String  @map("sub_district")
  isMainAddress Boolean @map("is_main_adderss")
  user          User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId        Int     @map("user_id")
}

model Favorite {
  id               Int                @id @default(autoincrement())
  name             String
  user             User               @relation(fields: [userId], references: [id])
  userId           Int                @map("user_id")
  favoriteProducts Favorite_Product[]
}

model Favorite_Product {
  id         Int      @id @default(autoincrement())
  favorite   Favorite @relation(fields: [favoriteId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  favoriteId Int      @map("favorite_id")
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId  Int      @map("product_id")
}

model Cart {
  id                  Int            @id @default(autoincrement())
  totalBeforeDiscount Int            @default(0) @map("total_before_discount")
  discount            Int            @default(0)
  deliveryFee         Int            @default(0) @map("delivery_fee")
  total               Int            @default(0)
  user                User           @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId              Int            @unique @map("user_id")
  cart_products       Cart_product[]
}

model Cart_product {
  id        Int     @id @default(autoincrement())
  quantity  Int     @default(1)
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  cartId    Int     @map("cart_id")
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId Int     @map("product_id")
}

model Order_product {
  id        Int     @id @default(autoincrement())
  qunatity  Int     @default(1)
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orderId   Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId Int     @map("product_id")
}

model Order {
  id                  Int             @id @default(autoincrement())
  totalBeforeDiscount Int             @default(0) @map("total_before_discount")
  discount            Int             @default(0)
  deliveryFee         Int             @default(0) @map("delivery_fee")
  total               Int             @default(0)
  createdAt           DateTime        @default(now()) @map("created_at")
  user                User            @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId              Int             @map("user_id")
  status              Status[]
  order_products      Order_product[]
}

enum OrderStatus {
  UNPAID
  PREPARED
  SHIPPED
  DELIVERED
  CANCELLED
}

model Status {
  id        Int         @id @default(autoincrement())
  status    OrderStatus @default(UNPAID)
  createdAt DateTime    @default(now()) @map("created_at")
  order     Order       @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orderId   Int         @map("order_id")
}

model Product {
  id                Int                 @id @default(autoincrement())
  volume            Int
  synopsis          String
  stock             Int                 @default(0)
  unit              Int                 @default(1)
  price             Int
  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId            Int                 @map("user_id")
  Favorite_Product  Favorite_Product[]
  Cart_product      Cart_product[]
  Order_product     Order_product[]
  Product_Promotion Product_Promotion[]
  Product_Img       Product_Img[]
  Publishing        Publishing?         @relation(fields: [publishingId], references: [id])
  publishingId      Int?
  Category          Category?           @relation(fields: [categoryId], references: [id])
  categoryId        Int?
  Author            Author?             @relation(fields: [authorId], references: [id])
  authorId          Int?
  Series            Series?             @relation(fields: [seriesId], references: [id])
  seriesId          Int?
}

model Product_Promotion {
  id          Int       @id @default(autoincrement())
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId   Int       @map("product_id")
  promotion   Promotion @relation(fields: [promotionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  promotionId Int       @map("promotion_id")
}

model Promotion {
  id                 Int                 @id @default(autoincrement())
  name               String
  bannerUrl          String?             @map("banner_url")
  discount           Int?
  point              Int?
  product_promotions Product_Promotion[]
}

model Product_Img {
  id        Int     @id @default(autoincrement())
  url       String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId Int     @map("product_id")
}

model Publishing {
  id       Int       @id @default(autoincrement())
  name     String
  count    Int       @default(0)
  products Product[]
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String
  count    Int       @default(0)
  products Product[]
}

model Author {
  id       Int       @id @default(autoincrement())
  name     String
  count    Int       @default(0)
  products Product[]
}

model Series {
  id       Int       @id @default(autoincrement())
  name     String
  count    Int       @default(0)
  products Product[]
}
